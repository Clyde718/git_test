1. Контрольные точки
2. Работа над одним репозиториев для нескольких человек

	1. git init - команда для отслеживания файлов в папке (инициализация репозитория) 
	   (у нас в проекте появляется скрытая папка .git)
	2. Представляемся git
		git config --local user.name "ИМЯ"
		git config --local user.email "ПОЧТА"
		
		В той самой папке .git внутри файла config должна отобразится информация о пользователе.



 Есть 3 состояния файлов 1. Мы просто создали файл
			 2. Когда git следит за определёнными файлами (другими словами git индексирует файлы)
 			 3. Третье состояние когда git создал контрольную точку (commit) 

 Начало работы.
	1. git status - проверка индексируемых файлов. 
	2. git add -A - добавляем все файлы в индексируемые	
	   Можно также добавить в индекс отдельный файл, например git add main.css
	3. Создаём контрольную точку git commit -a -m"Initial Commit"
	 - git log - просмотр выполненых коммитов 


	Создаём репозиторий на githab - 
	В самом проекте у нас локально через терминал добавляем команду git remote add origin https://github.com/Clyde718/project.git
	Она связывает локальный и удалённый репозиторий


    Использование git с разных компьютеров 	
	1. На другом компьютере нужно создать отдельную папку - например Work -	
	2. Внутри этой папки переходим в консоль и выполняем клонирование указав ссылку на репозиторий из githab 
	 	git clone https://github.com/Clyde718/project.git тут через пробел пишем название подпапки (название нашего репозитория)
	3. Всё- репозиторий клонирован.
	4. Осталось только забрать себе локально те измененния которые были на удалённом репозитории (команда git pull)




	ВАЖНО - РЕДАКТИРОВАНИЕ ФАЙЛОВ НА УДАЛЁННОМ РЕПОЗИТОРИИ ЧЕРЕЗ ИНТЕРФЕЙС GITHAB
	Бывают ситуации когда мы сделали какое-то изменение на удалённом репозитории вручную через интерфейс (например загрузили какой-то файл или внесли правку в код, или добавили файл README)
	 - Потом в свою очередь я у себя в локальном репозитории вношу какой-то коммит (перед этим не учли изменения на удал репозитории)
	 - при попытке запушить изменения выдаст ошибку (что-то типо "На удалённом репозитории уже есть более новая версия нашего проекта).	
	 - поэтому нужно использовать git pull
	 - после этого нам приходит новый кусок кода например или файл с удалённого репо, и паралельно с этим на локальном репо были внесены изменения
	 - теперь наш проект (локальный и удалённый сливаются воединно) - это называется Merge
	 - используем git pull - потом git push  



	gitignore - 
	- nodemodules - не добавлять 





	Курс Git
	1 / dir - отобразить все папки и каталоги
	2. сd .. - выйти на каталог выше

	3. Кнопка в VS Code - инициализировать репозиторий (должна появится скрытая папка git) - аналог команды git init
	4. git clone - клонировать репозиторий
	5. Git History Diff - плагин
	6. git status
	7. git pull - загрузить


	Отменить
	git checkout -- index.html - сделать отмену изменений в коде (те которые мы просто прописали в файле) - эта команда просто удалит поcледние сохранённые строки кода
	Но бывает такое что мы сделали изменения в нескольких файлах (git checkout . ) - отмена сохранений во всех файлах

	эТОт СПОСОБ работает когда мы просто сохранили файлы, но пока ещё не добавили в индексируемые
	

	Отменить если файлы уже в индексе
	- git reset index.html - удаляем из индексируемых
	- git checkout -- index.html - удаляем сохранение из файла

	или если нужно сделать отменц во всех файлах 
	git reset . 
	git checkout -- .



	Отменить если файлы уже в коммите
	git reset --hard HEAD^1 - откатится на 1 коммит назад

	Также: - если мы сделали изменения и хотим вытащить из коммита (но не удалять, а оставить сохранение в файлах) - git reset --soft HEAD^1







	Работа с ветками
	1. git branch - просмотр веток
	2. git branch -v - покажет последний коммит в текущей ветке
	3. git branch dev - создали новую ветку dev
	4. git checkout dev - перейти в ветку dev
	5. git checkout -b about - создали новую ветку about и сразу перешли в неё
	6. git branch -m myfix - переименовали ветку на myfix 
	7. git checkout e4b5ef6 - вернутся к конкретному коммиту (в конце указывается HASH коммита)
	8. git branch -D dev - (удалить ветку dev)

